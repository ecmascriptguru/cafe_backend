pipelines:
  branches:
    master:
      - step:
          name: build and publish docker image.
          services:
            - docker # enable Docker for your repository
          script: # Modify the commands below to build your repository.
            # set DOCKER_HUB_USERNAME and DOCKER_HUB_PASSWORD as environment variables
            # Docker variables
            - export IMAGE_NAME="${DOCKER_HUB_USERNAME}/${BITBUCKET_REPO_SLUG}:${BITBUCKET_BUILD_NUMBER}"
            # build the Docker image (this will use the Dockerfile in the root of the repo)
            - docker build -t "$IMAGE_NAME" .
            # authenticate with the Docker Hub registry
            - docker login --username "$DOCKER_HUB_USERNAME" --password "$DOCKER_HUB_PASSWORD"
            # push the new Docker image to the Docker registry
            - docker push "$IMAGE_NAME"
          caches:
            - docker
      - step:
          name: deploy-to-ecs
          image: atlassian/pipelines-awscli:latest
          deployment: test
          script:
            # AWS authentication variables
            # set AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY as environment variables
            # set AWS_SECURITY_TOKEN and AWS_SESSION_TOKEN as environment variables if using temporary credentials via AWS STS
            - export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-"us-east-1"} #default is us-east-1
            # Dockerhub Authentication variables
            # set DOCKER_HUB_USERNAME and DOCKER_HUB_PASSWORD as environment variables
            # Docker variables
            - export IMAGE_NAME="${DOCKER_HUB_USERNAME}/${BITBUCKET_REPO_SLUG}:${BITBUCKET_BUILD_NUMBER}"
            # ECS variables
            - export ECS_CLUSTER_NAME="${BITBUCKET_REPO_OWNER}"
            - export ECS_SERVICE_NAME="${BITBUCKET_REPO_SLUG}"
            - export ECS_TASK_NAME="${BITBUCKET_REPO_SLUG}"
            - export ECS_CONTAINER_INSTANCE_ID="${AWS_ECS_CONTAINER_INSTANCE}"
            # Create ECS cluster, task, service
            - aws ecs list-clusters | grep "${ECS_CLUSTER_NAME}" || aws ecs create-cluster --cluster-name "${ECS_CLUSTER_NAME}"
            # Stop the task
            - export ECS_LATEST_TASK_ARN=$(aws ecs list-tasks --container-instance "${AWS_ECS_CONTAINER_INSTANCE}" --cluster "${ECS_CLUSTER_NAME}" --desired-status RUNNING | jq -r '.taskArns | map(.[40:]) | reduce .[] as $item (""; . + $item + "")')
            - echo "${ECS_LATEST_TASK_ARN}"
            - '[ ! -z ${ECS_LATEST_TASK_ARN} ] && aws ecs stop-task --cluster "${ECS_CLUSTER_NAME}" --task "${ECS_LATEST_TASK_ARN}"  || echo "No Task"'
            # Updating the existing cluster, task, service
            - export TASK_VERSION=$(aws ecs register-task-definition
              --family "${ECS_TASK_NAME}"
              --container-definitions
              '[{"name":"app","image":"'"${IMAGE_NAME}"'","memory":1024,"portMappings":[{"containerPort":80,"hostPort":80,"protocol":"tcp"},{"containerPort":443,"hostPort":443,"protocol":"tcp"}]}]'
              | jq --raw-output '.taskDefinition.revision')
            - echo "Registered ECS Task Definition:" "${TASK_VERSION}"
            # Create ECS Service
            - aws ecs list-services --cluster "${ECS_CLUSTER_NAME}"  | grep "${ECS_SERVICE_NAME}" || aws ecs create-service --service-name "${ECS_SERVICE_NAME}" --cluster "${ECS_CLUSTER_NAME}" --task-definition "${ECS_TASK_NAME}" --desired-count 1
            - aws ecs update-service --cluster "${ECS_CLUSTER_NAME}" --service "${ECS_SERVICE_NAME}" --task-definition "${ECS_TASK_NAME}:${TASK_VERSION}"
            - aws ecs run-task --cluster "${ECS_CLUSTER_NAME}" --task-definition "${BITBUCKET_REPO_SLUG}":"${TASK_VERSION}"
            # Follow https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_container_instance.html for instrunctions
            # needed to provide the compute resources (EC2 instances) that the tasks will run on.

options:
  docker: true