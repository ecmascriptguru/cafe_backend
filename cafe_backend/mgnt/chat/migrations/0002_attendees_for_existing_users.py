# Generated by Django 2.0.9 on 2019-05-13 17:58

from __future__ import unicode_literals

from django.db import migrations
from cafe_backend.core.constants.types import CHAT_ROOM_TYPE


def create_channels_for_existing_users(apps, schema_editor):
    Channel = apps.get_model('chat', 'Channel')
    User = apps.get_model('users', 'User')

    # For public channels
    public_channel, created = Channel.objects.get_or_create(
        name='Public', channel_type=CHAT_ROOM_TYPE.public)

    count = 0
    for user in User.objects.all():
        public_channel.attendees.create(user=user)
        count += 1

    print("%d attendees for public channels created successfully." % count)

    # For private channels between 2 table combinations
    users = User.objects.filter(is_table=True).exclude(table=None)
    count = 0
    for t1 in users:
        for t2 in users:
            qs = Channel.objects.filter(attendees__user__pk=t1.pk).\
                filter(attendees__user__pk=t2.pk).filter(
                    channel_type=CHAT_ROOM_TYPE.private)
            if t1 != t2 and qs.exists():
                continue

            if t1 == t2:
                channel = Channel.objects.create(
                    name=t1.first_name, channel_type=CHAT_ROOM_TYPE.private)
                channel.attendees.create(user=t1)
            else:
                channel = Channel.objects.create(
                    name="%s-%s" % (t1.first_name, t2.first_name),
                    channel_type=CHAT_ROOM_TYPE.private)
                channel.attendees.create(user=t1)
                channel.attendees.create(user=t2)
            count += 1

    print("%d attendees for private channels created successfully." % count)


def reverse_func(apps, schema_editor):
    Channel = apps.get_model('chat', 'Channel')
    print(Channel.objects.all().delete())


class Migration(migrations.Migration):

    dependencies = [
        ('chat', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(create_channels_for_existing_users, reverse_func)
    ]
